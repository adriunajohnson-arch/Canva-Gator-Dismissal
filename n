<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>WCMS Bus Dismissal Board — Cloud Sync</title>
<style>
:root{--bg:#344e41;--panel:#3a5a40;--btn:#588157;--accent:#a3b18a;--text:#dad7cd;--bd:#274033;--tile:#2f4639}
*{box-sizing:border-box}
body{margin:0;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Helvetica,Arial;background:var(--bg);color:var(--text)}
header{display:flex;justify-content:space-between;align-items:center;padding:14px 18px;background:#2f4639;border-bottom:1px solid var(--bd)}
.brand{display:flex;gap:10px;align-items:center;font-weight:800}
.chip{padding:4px 8px;border-radius:999px;border:1px solid var(--bd);background:#2c4437;opacity:.95;font-size:12px}
.container{max-width:1200px;margin:18px auto;padding:0 16px}
.layout{display:grid;grid-template-columns:1fr 320px;gap:16px}
@media (max-width:900px){.layout{grid-template-columns:1fr}}
.panel{background:var(--panel);border:1px solid var(--bd);border-radius:16px;padding:14px;box-shadow:0 8px 24px #0005}
.row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px;margin-top:12px}
.bus{position:relative;background:var(--tile);border:1px solid var(--bd);border-radius:14px;padding:24px 14px;text-align:center;font-weight:900;font-size:32px}
.inline-btn{position:absolute;top:8px;right:8px;font-size:12px;padding:6px 8px;border-radius:10px;border:1px solid var(--bd);background:var(--panel);color:var(--text);cursor:pointer}
.departed-item{background:var(--tile);border:1px solid var(--bd);border-radius:12px;padding:8px 10px;margin-top:8px;display:flex;justify-content:space-between}
input{background:#263b30;color:var(--text);border:1px solid var(--bd);border-radius:12px;padding:10px 12px;outline:none;min-width:260px}
button{cursor:pointer;font-weight:800;border-radius:12px;padding:10px 14px;border:1px solid var(--bd);background:var(--btn);color:var(--text)}
button.secondary{background:var(--accent);color:#263326}
.muted{opacity:.85;font-size:12px}
.hidden{display:none}
</style>
</head>
<body>
<header>
  <div class="brand">
    <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M3 13h18v3a5 5 0 0 1-5 5H8a5 5 0 0 1-5-5v-3Z" stroke="#a3b18a" stroke-width="1.5"/><path d="M5 9.5h14a2 2 0 0 1 2 2V13H3v-1.5a2 2 0 0 1 2-2Z" fill="#2f4639" stroke="#a3b18a" stroke-width="1.5"/><circle cx="7" cy="18.5" r="1.7" fill="#a3b18a"/><circle cx="17" cy="18.5" r="1.7" fill="#a3b18a"/></svg>
    <span>WCMS Bus Dismissal Board</span>
  </div>
  <div class="row">
    <span id="syncBadge" class="chip">Sync: Cloud</span>
    <span id="adminStatus" class="chip">Viewer</span>
    <button id="adminLoginBtn" class="secondary">Admin Login</button>
  </div>
</header>

<div class="container">
  <!-- Admin Controls -->
  <div id="adminPanel" class="panel hidden" aria-live="polite">
    <div class="row" style="justify-content:space-between;width:100%">
      <strong>Admin Controls</strong>
      <div class="row">
        <span id="sessionTimeLeft" class="chip">Admin: --</span>
        <button id="lockBtn">Lock Now</button>
      </div>
    </div>
    <div class="row" style="margin-top:8px">
      <input id="busInput" placeholder="Type entries separated by commas (e.g., 102, Car & Van, A/B, Blue Team). Press Enter or Comma to add." />
      <button id="addBtn">Add to Board</button>
      <button id="clearAllBtn">Clear All</button>
    </div>
    <div class="muted">Accepts words & symbols (/, &, -). Newest on top. Enter/comma to add. Crisp chime + voice on add & depart.</div>
  </div>

  <div class="layout">
    <div class="panel">
      <div class="row" style="justify-content:space-between;align-items:center">
        <h2 style="margin:0">Now Boarding</h2>
        <span class="muted" id="liveMeta">Cloud Firestore</span>
      </div>
      <div id="board" class="grid" aria-live="assertive"></div>
    </div>
    <aside class="panel" aria-live="polite">
      <h3 style="margin:0 0 8px 0">Departed</h3>
      <div id="departedList"></div>
    </aside>
  </div>
</div>

<!-- Firebase (Compat SDK for simplest single-file use) -->
<script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore-compat.js"></script>

<script>
/* ---------------- Firebase Config (yours) ---------------- */
const firebaseConfig = {
  apiKey: "AIzaSyAOFY5GUONFgaorwLfaCE7imj5NbN0NN0U",
  authDomain: "wcms-bus-board.firebaseapp.com",
  projectId: "wcms-bus-board",
  storageBucket: "wcms-bus-board.firebasestorage.app",
  messagingSenderId: "302977263459",
  appId: "1:302977263459:web:cd3aaf4a1ff3fca36b1556",
  measurementId: "G-TP5DSZS0X2"
};

/* ---------------- App Init ---------------- */
let db=null;
try{ const app=firebase.initializeApp(firebaseConfig); db=firebase.firestore(); }
catch(e){ console.error("Firebase init failed:", e); alert("Couldn't connect to Firebase. Check your config."); }

/* ---------------- Helpers ---------------- */
// Keep the user’s exact text (including &, /, -, words). Trim only.
function tokenize(input){
  return String(input||'')
    .split(',')                    // commas separate entries
    .map(s => s.trim())            // keep punctuation/words as-is
    .filter(Boolean);              // drop empties
}
function toKey(s){ return s.trim().toLowerCase(); } // for de-dup lookups (case-insensitive)

// CRISP chimes (arrival = higher+longer, depart = lower+shorter)
function chime(freq1,freq2,vol,dur){
  try{
    var Ctx=window.AudioContext||window.webkitAudioContext; if(!Ctx) return;
    var ctx=new Ctx(); var o1=ctx.createOscillator(), o2=ctx.createOscillator(); var g=ctx.createGain();
    o1.type='triangle'; o2.type='sine';
    o1.frequency.value=freq1; o2.frequency.value=freq2;
    g.gain.setValueAtTime(0.0001, ctx.currentTime);
    g.gain.exponentialRampToValueAtTime(vol, ctx.currentTime+0.03);
    g.gain.exponentialRampToValueAtTime(0.0001, ctx.currentTime+dur); // crisp stop
    o1.connect(g); o2.connect(g); g.connect(ctx.destination);
    o1.start(); o2.start(); o1.stop(ctx.currentTime+dur); o2.stop(ctx.currentTime+dur);
  }catch(e){}
}
function chimeArrival(){ chime(1046.5,1568.0,1.0,1.5); } // C6 + G6, longer
function chimeDepart(){  chime(659.25, 440.0,0.9,0.8); } // E5 + A4, shorter

function speak(text){
  try{
    if('speechSynthesis' in window){
      var u=new SpeechSynthesisUtterance(text);
      u.rate=1.0; u.pitch=1.0; u.lang='en-US';
      speechSynthesis.speak(u);
    }
  }catch(e){}
}

/* ---------------- Admin (PIN 1234) ---------------- */
var PASSCODE='1234';
var adminPanel=document.getElementById('adminPanel');
var adminStatus=document.getElementById('adminStatus');
var adminLoginBtn=document.getElementById('adminLoginBtn');
var lockBtn=document.getElementById('lockBtn');
var sessionTimeLeft=document.getElementById('sessionTimeLeft');

function isAdmin(){ var v=localStorage.getItem('bus_admin_until'); return v && Number(v)>Date.now(); }
function setAdminFor1Hour(){ var until=Date.now()+3600000; localStorage.setItem('bus_admin_until', String(until)); updateAdminUI(); }
function clearAdmin(){ localStorage.removeItem('bus_admin_until'); updateAdminUI(); }
function updateAdminUI(){
  var a=isAdmin();
  adminPanel.classList.toggle('hidden', !a);
  adminLoginBtn.classList.toggle('hidden', a);
  adminStatus.textContent = a ? 'Admin' : 'Viewer';
}
adminLoginBtn.addEventListener('click', function(){
  var p=prompt('Enter passcode'); if(p===PASSCODE){ setAdminFor1Hour(); } else if(p!==null){ alert('Incorrect passcode.'); }
});
lockBtn && lockBtn.addEventListener('click', clearAdmin);
setInterval(function(){
  var v=localStorage.getItem('bus_admin_until');
  if(!v){ sessionTimeLeft.textContent='Locked'; return; }
  var ms=Number(v)-Date.now();
  if(ms<=0){ clearAdmin(); sessionTimeLeft.textContent='Locked'; return; }
  var m=Math.floor(ms/60000), s=Math.floor((ms%60000)/1000);
  sessionTimeLeft.textContent='Admin: '+m+'m '+s+'s left';
},1000);
updateAdminUI();

/* ---------------- Firestore Collections ---------------- */
const ACTIVE='wcms_bus_board';
const DEPARTED='wcms_bus_departed';

/* ---------------- UI Elements ---------------- */
var board=document.getElementById('board');
var departedList=document.getElementById('departedList');
var busInput=document.getElementById('busInput');
var addBtn=document.getElementById('addBtn');
var clearAllBtn=document.getElementById('clearAllBtn');
var liveMeta=document.getElementById('liveMeta');

function renderActive(items){
  board.innerHTML='';
  // items already newest-first
  items.forEach(function(display){
    var d=document.createElement('div');
    d.className='bus';
    d.innerHTML='<button class="inline-btn" data-id="'+display+'">Remove</button>'+display;
    board.appendChild(d);
  });
}
function renderDeparted(items){
  departedList.innerHTML='';
  items.forEach(function(n){
    var e=document.createElement('div');
    e.className='departed-item';
    e.textContent=n;
    departedList.appendChild(e);
  });
}

/* ---------------- Real-time listeners (announce once) ---------------- */
var activeLoaded=false;
var departedLoaded=false;

if(db){
  // Active: order by createdAt DESC so newest is on top
  db.collection(ACTIVE)
    .orderBy('createdAt','desc')
    .onSnapshot(function(snap){
      liveMeta.textContent='Cloud Firestore · '+snap.size+' entries';
      var arr = snap.docs.map(d => (d.data().number ?? d.id)); // support old docs
      renderActive(arr);

      if(!activeLoaded){ activeLoaded=true; return; }
      var added = snap.docChanges()
        .filter(c => c.type==='added')
        .map(c => (c.doc.data().number ?? c.doc.id));
      if(added.length){
        chimeArrival();
        speak('Bus ' + added.join(', ') + ' is now boarding');
      }
    }, function(err){
      console.error(err); liveMeta.textContent='Cloud Firestore · error';
    });

  // Departed: newest departures first
  db.collection(DEPARTED)
    .orderBy('departedAt','desc')
    .onSnapshot(function(snap){
      var arr=[]; snap.forEach(function(doc){ var d=doc.data(); arr.push(d.number||doc.id); });
      renderDeparted(arr);

      if(!departedLoaded){ departedLoaded=true; return; }
      var added = snap.docChanges()
        .filter(c => c.type==='added')
        .map(c => (c.doc.data().number || c.doc.id));
      if(added.length){
        chimeDepart();
        speak('Bus ' + added.join(', ') + ' has departed');
      }
    });
}

/* ---------------- Cloud Mutations (accept words & symbols) ---------------- */
async function addFromStringCloud(str){
  var tokens = tokenize(str);
  if(!tokens.length) return;

  // For each token: if not present (case-insensitive), add a new doc
  // We store both display text and a lowercase key for de-dup checks.
  const adds = [];
  for(const display of tokens){
    const key = toKey(display);
    // check if already active
    const snap = await db.collection(ACTIVE).where('numberLower','==',key).limit(1).get();
    if(snap.empty){
      adds.push(
        db.collection(ACTIVE).add({
          number: display,              // keep exact text with symbols
          numberLower: key,             // for de-dup
          createdAt: firebase.firestore.FieldValue.serverTimestamp()
        })
      );
    }
  }
  if(adds.length){
    try{ await Promise.all(adds); }catch(e){ console.error('Add failed',e); alert('Add failed. Check permissions.'); }
  }
  busInput.value='';
}

async function departCloud(display){
  const key = toKey(display);
  // find the active doc by numberLower, delete it, write to departed
  const qs = await db.collection(ACTIVE).where('numberLower','==',key).limit(1).get();
  if(qs.empty) return;
  const docRef = qs.docs[0].ref;
  await db.runTransaction(async tx=>{
    const s = await tx.get(docRef);
    if(s.exists){
      tx.set(db.collection(DEPARTED).doc(display+'-'+Date.now()), {
        number: display,
        departedAt: firebase.firestore.FieldValue.serverTimestamp()
      });
      tx.delete(docRef);
    }
  }).catch(e=>{ console.error('Remove failed',e); alert('Remove failed. Check permissions.'); });
}

function clearAllCloud(){
  function deleteAll(coll){
    return db.collection(coll).get().then(function(q){
      const ops=[]; q.forEach(d=> ops.push(db.collection(coll).doc(d.id).delete()));
      return Promise.all(ops);
    });
  }
  Promise.all([deleteAll(ACTIVE), deleteAll(DEPARTED)])
    .catch(function(err){ console.error('Clear failed',err); alert('Clear failed. Check permissions.'); });
}

/* ---------------- Handlers (no spacebar adds) ---------------- */
addBtn.addEventListener('click', function(){
  if(!isAdmin()) return alert('Unlock admin first');
  addFromStringCloud(busInput.value);
});
// Only Enter or comma adds. Spacebar does nothing now.
busInput.addEventListener('keydown', function(e){
  if(!isAdmin()) return;
  if(e.key==='Enter' || e.key===','){
    e.preventDefault();
    addFromStringCloud(busInput.value);
  }
});
// Input handler: only react to trailing comma (not space)
busInput.addEventListener('input', function(){
  if(!isAdmin()) return;
  const v = busInput.value;
  if(v.endsWith(',') && v.trim().length>1){
    addFromStringCloud(v.slice(0,-1)); // drop the comma before sending
    busInput.value='';
  }
});

// Delegated remove (by display text)
document.addEventListener('click', function(e){
  const id = e.target && e.target.getAttribute('data-id'); if(!id) return;
  if(!isAdmin()) return alert('Unlock admin first');
  departCloud(id);
});
clearAllBtn.addEventListener('click', function(){
  if(!isAdmin()) return alert('Unlock admin first');
  if(confirm('Clear all entries and departed?')) clearAllCloud();
});
</script>
</body>
</html>
